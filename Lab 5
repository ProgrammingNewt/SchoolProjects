//Names: Ariel Espinoza, BingFong (Curtis)
//Description: Files added to program
/*for this iteration of the project, files were added as a functionality. Since we
had made this program
using objects, we did not have to change arrays into structures. Instead we just
changed
"class" to struct". Secondly a bookings.txt file was added to the program location
in order to test the program.
*/
//Date Finished: 9/28/2023
#include <iostream>
#include <string>
#include <regex>
#include <fstream>
#include <iomanip>
using namespace std;
//Total bookings allowed
const int BOOKINGS = 10;
struct Booking{
public:
string name;
string originAirport;
string destAirport;
string date;
int month; //added for ease of use
int day;
void parseDate() //parses date into ints
{
month = stoi(date.substr(0, 2));
day = stoi(date.substr(3, 2));
}
};
void bookFlight(Booking &flight){
cout << "Enter your name: ";
getline(cin, flight.name);
cout << "Enter your origin airport: ";
getline(cin, flight.originAirport);
cout << "Enter your destination airport: ";
getline(cin, flight.destAirport);
//now user needs to put the date in a specific format (MM/DD)
regex date_format("^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])$");
cout << "Enter date of flight (MM/DD): ";
getline(cin, flight.date);
while (!regex_match(flight.date, date_format))
{
cout << "Invalid date! Please use the MM/DD." << endl;
cout << "Enter date of flight (MM/DD): ";
getline(cin, flight.date);
}
cout << "Flight booked successfully!" << endl;
cout << endl;
}
void deleteBooking(Booking &flight){
if((!flight.name.empty()) && (!flight.originAirport.empty()) && (!
flight.destAirport.empty()) && (!flight.date.empty()) ){
flight.name = "";
flight.originAirport = "";
flight.destAirport = "";
flight.date = "";
cout << "Booking successfully deleted." << endl;
cout << endl;
}
else{
cout << "No booking curretly exist to deltete. Please book a flight before
deleting." << endl;
cout << endl;
}
}
void showBooking(Booking &flight){
if((!flight.name.empty()) && (!flight.originAirport.empty()) && (!
flight.destAirport.empty()) && (!flight.date.empty()) ){
//cout << "Here is your current booking information!" << endl;
cout << "Booking name: " << flight.name << "." << endl;
cout << "Origin airport: " << flight.originAirport << "." << endl;
cout << "Destination airport: " << flight.destAirport << "." << endl;
cout << "Booking date: " << flight.date << "." << endl;
cout << endl;
}
else{
cout << "No booking currently exists. Please book a flight to show current
booking." << endl;
cout << endl;
}
}
void sortByDates(Booking bookings[], int bookingIndex) {
for (int i = 0; i < bookingIndex-1; i++) {
for (int j = 0; j < bookingIndex-i-1; j++) {
if (bookings[j].month > bookings[j+1].month || (bookings[j].month ==
bookings[j+1].month && bookings[j].day > bookings[j+1].day)) {
Booking change = bookings[j];
bookings[j] = bookings[j+1];
bookings[j+1] = change;
}
}
}
}
//shows bookings by date
void showByDate(string date, Booking bookings[], int bookingIndex){
int month = stoi(date.substr(0, 2));
int day = stoi(date.substr(3, 2));
bool empty = true;
for (int i = 0; i < bookingIndex; i++){
if(month == bookings[i].month && day == bookings[i].day){
cout << endl;
cout << "#" << i+1 << ")" << endl;
cout << "Booking name: " << bookings[i].name << "." << endl;
cout << "Origin airport: " << bookings[i].originAirport << "." << endl;
cout << "Destination airport: " << bookings[i].destAirport << "." <<
endl;
cout << "Booking date: " << bookings[i].date << "." << endl;
cout << endl;
empty = false;
}
}
if(empty){
cout << "No booking for this date currently exists."<< endl;
cout << endl;
}
}
//deletes bookings by date
void deleteByDate(string date, Booking bookings[], int &bookingIndex){
//parses string input into ints in order to work with them
int month = stoi(date.substr(0, 2));
int day = stoi(date.substr(3, 2));
bool empty = true;
//Keeps track of bookings that will not be deleted
int currentIndex = 0;
for (int i = 0; i < bookingIndex; i++) {
//checks if the booking matches day, if they do NOT match counter of
bookings we want to keep goes up
if (!(bookings[i].month == month && bookings[i].day == day)) {
//if dates to delete do not match but indexes dont match also, it means
there are multiple bookings with date to delete
//this will cause the booking in the current index i to move to the
first time a booking where an index
//which contains a date to delete is located to override that booking.
if (currentIndex != i) {
bookings[currentIndex] = bookings[i];
}
currentIndex++;
}
}
//Will delete some dates as booking index will be larger than current index as
current only goes up to bookingIndex-1
if (currentIndex != bookingIndex) {
bookingIndex = currentIndex; //extra bookings deleted
cout << "Bookings on " << date << " have been successfully deleted!" <<
endl;
} else {
cout << "No booking for this date currently exists to delete." << endl;
}
cout << endl;
}
//saves info to file location
void saveFile(Booking bookings[], int bookingIndex) {
ofstream outFile("bookings.txt");
for (int i = 0; i < bookingIndex; i++) {
outFile << bookings[i].name << "\n"
<< bookings[i].originAirport << "\n"
<< bookings[i].destAirport << "\n"
<< bookings[i].date << "\n";
}
outFile.close();
}
//Checks file
int fileData(Booking bookings[]) {
ifstream inFile("bookings.txt");
//sets index to 0, since first thing program will do is check file
int bookingIndex = 0;
//makes sure file is not empty
while (inFile.good() && bookingIndex < BOOKINGS) {
if (!inFile.is_open()) {
cout << "No file data currently exists!" << endl;
return 0;
}
//gets data in this specific format
getline(inFile, bookings[bookingIndex].name);
getline(inFile, bookings[bookingIndex].originAirport);
getline(inFile, bookings[bookingIndex].destAirport);
getline(inFile, bookings[bookingIndex].date);
bookings[bookingIndex].parseDate();
bookingIndex++;
}
//tests if anthother booking can be made, if not lets user know
//this way we know 10 bookings are not saved and rest are deleted
string testing;
if (getline(inFile, testing)) {
cout << setfill('-') << setw(80) << "-" << endl;
cout << "Too many bookings created, please edit your file to contain less
than 10 bookings. " << endl;
cout << setfill('-') << setw(80) << "-" << endl;
}
//closes file
inFile.close();
//updated index from the file additions
return bookingIndex;
}
int main() {
//int bookingIndex = 0;
//Makes an array of bookings with 10 elements
Booking flight[BOOKINGS];
int bookingIndex = fileData(flight);
bool running = true;
int choice;
string input;
while (running){
cout << "Flight Booking Menu" << endl;
cout << "1. Book a flight" << endl;
cout << "2. Delete a booking" << endl;
cout << "3. Show current booking" << endl;
cout << "4. Show bookings by date" << endl;
cout << "5. Delete bookings by date" << endl;
cout << "6. Exit" << endl;
cout << endl;
cout << "Enter your choice: " << endl;
getline(cin, input);
bool validChoice = true;
//Makes sure input is a number that is valid
for (int i = 0; i < input.length(); i++) {
if (!isdigit(input[i])) {
validChoice = false;
break;
}
}
if (validChoice) {
choice = stoi(input);
} else {
cout << "Choice not selected. Please enter a valid number." << endl;
cout << endl;
continue;
}
if (choice == 1){
//Checks that there enough space to make a new bookings, since only 10
are allowed
if(bookingIndex < BOOKINGS){
bookFlight(flight[bookingIndex]); //Created new booking object in
array
flight[bookingIndex].parseDate();
bookingIndex++;
;
}
//Gives this is we are at 10 bookings
else {
cout << "Booking limit reached! You must delete at least one
booking to create a new one!" << endl;
}
}
else if (choice == 2){
//Makes sure that array is not empty, since we need a at least one
booking to delete.
if (bookingIndex > 0){
//input for user to define which booking they would like to delete
string nameToDelete;
bool nameExist = false;
int bookingDeleteIndex;
cout << "Please enter the name of the booking you would like to
delete" << endl;
getline(cin, nameToDelete);
//Goes through active bookings looking to see if name that user
gave matches a name in Bookings
for(int i = 0; i < bookingIndex; i++){
//Checking if names match
if(flight[i].name == nameToDelete){
nameExist = true;
//Keeps track of which index the booking to delete was
found
bookingDeleteIndex = i;
//Deletes specified booking
deleteBooking(flight[bookingDeleteIndex]);
//Move up all bookings past the booking that was deleted
for(int i = bookingDeleteIndex; i < bookingIndex-1; i++){
flight[i] = flight[i+1];
//Changes position of last one since loop is for
bookingIndex - 1. This is done to not break the program as if i was = to 9 and we
did flight[10], it would cause problems
if(bookingIndex == BOOKINGS){
flight[8] = flight[BOOKINGS-1];
}
}
//subtract one from booking index.
bookingIndex--;
}
}
//Checks if name given was actually valid, if it was then the
booking was deleted and everything else was moved up and gives user the
confirmation
if(nameExist){
cout << "Booking has been successfully deleted!" << endl;
}
//Tells user name was not found.
else
{
cout << "Name does not match booking to delete. Please try
again." << endl;
cout << endl;
}
}
else{
cout << "No booking curretly exist to deltete. Please book a flight
before deleting." << endl;
}
}
//Prints a list of the bookings in order by which they were booked
else if (choice == 3){
//Checks if there are bookings in array
if(bookingIndex > 0){
cout << "List of current bookings!" << endl;
for(int i = 0; i < bookingIndex; i++){
cout << "Booking #" << i+1 << ": " << endl;
showBooking(flight[i]);
}
}
//if no bookings
else {
cout << "No booking currently exists. Please book a flight to show
current booking." << endl;
cout << endl;
}
}
else if(choice == 4){
string inputDate;
regex date("^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])$");
cout << "Please enter in a date in the format (MM/DD)" << endl;
getline(cin, inputDate);
while (!regex_match(inputDate, date))
{
cout << "Invalid date! Please use the MM/DD." << endl;
cout << "Please enter in a date in the format (MM/DD): ";
getline(cin, inputDate);
}
showByDate(inputDate, flight, bookingIndex);
}
else if(choice == 5){
string inputDate;
//makes sure format is correct
regex date("^(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])$");
cout << "Please enter in a date in the format (MM/DD) to delete all
bookings for this date." << endl;
getline(cin, inputDate);
while (!regex_match(inputDate, date))
{
cout << "Invalid date! Please use the MM/DD." << endl;
cout << "Please enter in a date in the format (MM/DD) to delete all
bookings for this date." << endl;
getline(cin, inputDate);
}
int bookingDeleteIndex;
deleteByDate(inputDate, flight, bookingIndex);
}
else if (choice == 6){
saveFile(flight, bookingIndex);
cout << "Goodbye!" << endl;
break;
}
else{
cout << "Option not in choices, please try again" << endl;
}
//After each iteration of the programs last input, it will resort all of
the flights by the dates.
sortByDates(flight, bookingIndex);
}
return 0;
}
